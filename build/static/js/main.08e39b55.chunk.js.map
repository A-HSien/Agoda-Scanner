{"version":3,"sources":["Setting.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultSettings","isEnabled","scanSpeed","city","scannerNumber","settings","getSettingsStream","chrome","storage","of","get","sync","bindCallback","bind","stream","pipe","map","currentSettings","Number","setSettingsStream","set","flatMap","settingsInited","App","useState","checkIn","moment","add","format","states","setStates","subscribe","newStates","handleChange","event","a","target","value","type","checked","name","className","onChange","disabled","onClick","Date","now","newURL","console","log","tabs","update","url","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gWAMaA,EAAkB,CAC3BC,WAAW,EACXC,UAAW,IACXC,KAAM,KACNC,eAAgB,GAEPC,EAAQ,eAAQL,GAStB,SAASM,IACZ,IAAKC,OAAOC,QAAS,OAAOC,YAAGT,GAE/B,IAAMU,EAAsFH,OAAOC,QAAQG,KAAKD,IAEhH,OADeE,YAAaF,GAAKG,KAAKN,OAAOC,QAAQG,KAC9CG,CAtBe,YAsBIC,KAAKC,aAAI,YAAwC,IAAvBC,EAAsB,WACtE,OAAKA,GACLA,EAAgBf,UAAYgB,OAAOD,EAAgBf,WAC5Ce,GAFsB,OAO9B,SAASE,EAAkBd,GAC9B,IAAKE,OAAOC,QAAS,OAAOC,YAAGJ,GAE/B,IAAMe,EAAMb,OAAOC,QAAQG,KAAKS,IAEhC,OADeR,YAAaQ,GAAKP,KAAKN,OAAOC,QAAQG,KAC9CG,CAAO,eAnCQ,WAmCQT,IAAYU,KAAKM,aAAQ,kBAAMf,QC7BjE,IAAIgB,GAAiB,EAsFNC,EApFH,WAAO,IAAD,EAEYC,mBAAQ,eAC/BnB,EAD+B,CAElCoB,QAASC,MAASC,IAAI,EAAG,OAAOC,ODXV,iBCOR,mBAETC,EAFS,KAEDC,EAFC,KAOXR,IACHA,GAAiB,EACjBhB,IAAoByB,WAAU,SAAA1B,GAC5B,IAAM2B,EAAS,eACVH,EADU,GAEVxB,GAELyB,EAAUE,OAId,IAAMC,EAAY,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,sDACXC,EAAWF,EAAXE,OACFC,EAAwB,aAAhBD,EAAOE,KAAsBF,EAAOG,QAAUH,EAAOC,MAC7DhC,EAHa,eAGGwB,EAHH,eAGYO,EAAOI,KAAOH,IAC7CP,EAAUzB,GACVc,EAAkBd,GAAU0B,YALT,2CAAH,sDAuBlB,OACE,yBAAKU,UAAU,OACb,2BAAOA,UAAU,SAAjB,iBACA,6BACA,yBAAKA,UAAU,QAEb,+CACA,2BAAOH,KAAK,WACVE,KAAK,YACLD,QAASV,EAAO5B,UAChByC,SAAUT,IAEZ,uEACA,2BAAOK,KAAK,SACVE,KAAK,YACLH,MAAOR,EAAO3B,UACdwC,SAAUT,IAEZ,+CACA,2BAAOK,KAAK,SACVE,KAAK,OACLH,MAAOR,EAAO1B,KACduC,SAAUT,IAGZ,qDACA,2BAAOK,KAAK,OACVE,KAAK,UACLH,MAAOR,EAAOJ,QACdiB,SAAUT,KAId,4BAAQK,KAAK,SACXK,UAAWd,EAAO5B,UAClB2C,QAjDK,WAAO,IACRzC,EAAkB0B,EAAlB1B,KAAMsB,EAAYI,EAAZJ,QACRrB,EAAgBC,EAASD,cAAgByC,KAAKC,MAChDC,EAAM,2DAAuD3C,EAAvD,iBAA6ED,EAA7E,oBAA6FsB,GACvGuB,QAAQC,IAAI,SAAWF,GAClBxC,OAAO2C,MAEZ/B,EAAkBd,GAAU0B,WAAU,SAAA1B,GACpC2C,QAAQC,IAAI5C,GAEZE,OAAO2C,KAAKC,OAAO,CAAEC,IAAKL,SAqC1B,SC1EcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.08e39b55.chunk.js","sourcesContent":["import { bindCallback, of } from 'rxjs';\nimport { map, flatMap } from 'rxjs/operators';\n\n\nexport const storageKey = 'settings';\nexport const dateFormat = 'YYYY-MM-DD';\nexport const defaultSettings = {\n    isEnabled: true,\n    scanSpeed: 5000,\n    city: 4951,\n    scannerNumber: -1,\n};\nexport const settings = { ...defaultSettings };\nexport type Settings = typeof defaultSettings;\n\n\nexport async function reloadSettings() {\n    return Object.assign(settings, await getSettingsStream().toPromise());\n};\n\n\nexport function getSettingsStream() {\n    if (!chrome.storage) return of(defaultSettings);\n\n    const get: (keys: string, callback: (items: { [key: string]: Settings }) => void) => void = chrome.storage.sync.get;\n    const stream = bindCallback(get).bind(chrome.storage.sync);\n    return stream(storageKey).pipe(map(({ [storageKey]: currentSettings }) => {\n        if (!currentSettings) return {} as Settings;\n        currentSettings.scanSpeed = Number(currentSettings.scanSpeed);\n        return currentSettings;\n    }));\n};\n\n\nexport function setSettingsStream(settings: Settings) {\n    if (!chrome.storage) return of(settings);\n\n    const set = chrome.storage.sync.set;\n    const stream = bindCallback(set).bind(chrome.storage.sync);\n    return stream({ [storageKey]: settings }).pipe(flatMap(() => getSettingsStream()));\n};","import React, { useState } from 'react';\nimport moment from 'moment';\nimport './App.css';\nimport { getSettingsStream, setSettingsStream, settings, dateFormat, Settings } from './Setting';\n\n\ninterface States extends Settings {\n  checkIn: string,\n};\n\nlet settingsInited = false;\n\nconst App = () => {\n\n  const [states, setStates] = useState<States>({\n    ...settings,\n    checkIn: moment().add(1, 'day').format(dateFormat)\n  });\n\n  if (!settingsInited) {\n    settingsInited = true;\n    getSettingsStream().subscribe(settings => {\n      const newStates = {\n        ...states,\n        ...settings,\n      };\n      setStates(newStates);\n    });\n  }\n\n  const handleChange = async (event: any) => {\n    const { target } = event;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const settings = { ...states, [target.name]: value };\n    setStates(settings);\n    setSettingsStream(settings).subscribe();\n  };\n\n\n  const go = () => {\n    const { city, checkIn } = states;\n    const scannerNumber = settings.scannerNumber = Date.now();\n    var newURL = `https://www.agoda.com/zh-tw/search?scannerNumber=${scannerNumber}&city=${city}&checkIn=${checkIn}`;\n    console.log('go to ' + newURL);\n    if (!chrome.tabs) return;\n\n    setSettingsStream(settings).subscribe(settings => {\n      console.log(settings);\n      debugger;\n      chrome.tabs.update({ url: newURL });\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      <label className=\"title\">Agoda Scanner</label>\n      <hr />\n      <div className=\"grid\">\n\n        <label>開啟</label>\n        <input type=\"checkbox\"\n          name=\"isEnabled\"\n          checked={states.isEnabled}\n          onChange={handleChange} />\n\n        <label>掃描持續時間</label>\n        <input type=\"number\"\n          name=\"scanSpeed\"\n          value={states.scanSpeed}\n          onChange={handleChange} />\n\n        <label>城市</label>\n        <input type=\"number\"\n          name=\"city\"\n          value={states.city}\n          onChange={handleChange} />\n\n\n        <label>入住日</label>\n        <input type=\"text\"\n          name=\"checkIn\"\n          value={states.checkIn}\n          onChange={handleChange} />\n\n      </div>\n\n      <button type=\"button\"\n        disabled={!states.isEnabled}\n        onClick={go}>\n        GO!\n      </button>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}